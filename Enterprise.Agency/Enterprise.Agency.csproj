<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <RootNamespace>Enterprise.Agency</RootNamespace>
    <GeneratePackageOnBuild>True</GeneratePackageOnBuild>
    <PackageId>Muoland.Agency</PackageId>
    <Title>Muoland.Agency</Title>
    <Authors>Muoland</Authors>
    <Description>The Muoland.Agency library empowers developers to create robust scalable web applications with ease. By abstracting complex concurrency models and providing essential APIs, it enables seamless communication between components following the actor model.</Description>
    <PackageProjectUrl>https://github.com/amuolo/data-management</PackageProjectUrl>
    <PackageIcon>Assets\img\logox.png</PackageIcon>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <RepositoryUrl>https://github.com/amuolo/data-management</RepositoryUrl>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
    <PackageTags>muoland, actor, model, concurrency, concurrent, actors, distributed, scalable, data, management, web, application, parallel, concurrent, governance, cloud, performance, threading, queue, jobs, background, long-running, AspNetCore, AspNet, NetCore, MVC, WPF, Razor, Blazor, eventsource, network, log, monitoring, reactive, dependency, injection, health, check, hosting	</PackageTags>
    <Version>2.1.0</Version>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.SignalR.Client" Version="8.0.4" />
    <PackageReference Include="Microsoft.Extensions.Hosting.WindowsServices" Version="8.0.0" />
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\Enterprise.JobFactory\Enterprise.JobFactory.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\Enterprise.MessageHub\Enterprise.MessageHub.csproj" PrivateAssets="All" />
    <ProjectReference Include="..\Enterprise.Utils\Enterprise.Utils.csproj" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
	<FrameworkReference Include="Microsoft.AspNetCore.App" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\LICENSE">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
    <None Include="..\README.md">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <None Update="Assets\img\logox.png">
      <Pack>True</Pack>
      <PackagePath>\</PackagePath>
    </None>
  </ItemGroup>

  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput> $(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
    <Copyright>MIT license</Copyright>
    <PackageReleaseNotes>

		27 May 2024 Release Note v2.1.0

		This version brings in much needed improvements and design improvements
		in the message handling block. With these changes deployed, it was easy
		to assemble a more powerful processor capable of responding to Read requests
		in parallel while the Agent is busy processing Update requests sequentially.
		This enables greater responsiveness and lower the burden of message queues
		and Agent workload.

		- Parallel Read request processor 🚀

		- More robust message handling schema, now capable of discriminating
		messages based on the method signature and return type as defined
		in the contract 🌟

	</PackageReleaseNotes>
    <Product>Muoland.Agency</Product>
  </PropertyGroup>

  <!-- The following blocks allow to pack the dependent project together with this one -->
	
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="BuildOnlySettings;ResolveReferences">
	<ItemGroup>
	  <_ReferenceCopyLocalPaths Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference')-&gt;WithMetadataValue('PrivateAssets', 'All'))" />
	</ItemGroup>

    <ItemGroup>
	  <BuildOutputInPackage Include="@(_ReferenceCopyLocalPaths)" TargetPath="%(_ReferenceCopyLocalPaths.DestinationSubDirectory)" />
    </ItemGroup>
  </Target>

</Project>