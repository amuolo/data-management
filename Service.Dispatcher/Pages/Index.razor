@page "/"

@using Enterprise.Agency
@using Enterprise.MessageHub
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json

@inject NavigationManager NavManager
@implements IAsyncDisposable

<div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div>

<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>

<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<ul>
    @foreach (string message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private string? ConnectionId => hubConnection?.ConnectionId;
    private HubConnection? hubConnection;
    private CancellationTokenSource TokenSource = new();
    private Dictionary<string, DateTime> uptimeByActor = new();
    private List<string> messages = new();
    private string? userInput;
    private string? messageInput;
    private string server = nameof(server);

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavManager.ToAbsoluteUri(Contract.SignalRAddress))
                                                  .WithAutomaticReconnect()
                                                  .Build();

        hubConnection.On<string, string, string>(MessageTypes.ReceiveLog, (sender, senderId, message) =>
        {
            var formattedMessage = $"{sender}: {message}";
            messages.Add(formattedMessage);
            InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string, string, string, string, string?>(MessageTypes.ReceiveMessage, async (sender, senderId, message, messageId, parcel) =>
        {
            if (message == Messages.AgentsDiscovery)
            {
                var responseParcel = JsonSerializer.Serialize(uptimeByActor.Keys);
                await hubConnection.SendAsync(MessageTypes.SendResponse, server, ConnectionId, senderId, messageId, responseParcel).ConfigureAwait(false);
                await hubConnection.SendAsync(MessageTypes.Log, server, ConnectionId, $"{MessageTypes.SendResponse} {Messages.AgentsDiscovery}");
            }
            else if (message == Messages.ConnectToServer)
            {
                await hubConnection.SendAsync(MessageTypes.EstablishConnection, server, ConnectionId, senderId, messageId).ConfigureAwait(false);
            }

            if (uptimeByActor.TryGetValue(sender, out var time))
                time = DateTime.UtcNow;
            else
                uptimeByActor.TryAdd(sender, DateTime.UtcNow);
        });

        StartAgentsTimingsMachine();
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        var messageId = Guid.NewGuid();
        var sender = userInput ?? "unknown user";
        var message = messageInput ?? "";

        if (hubConnection is not null) {
            await hubConnection.SendAsync(MessageTypes.Log, sender, ConnectionId, message);
            await hubConnection.SendAsync(MessageTypes.SendMessage, sender, ConnectionId, null, message, messageId, null);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    private void StartAgentsTimingsMachine() 
    {
        Task.Run(async () =>
        {
            var timer = new PeriodicTimer(TimeSpans.HireAgentsPeriod);
            while (await timer.WaitForNextTickAsync().ConfigureAwait(false) && !TokenSource.IsCancellationRequested)
            {
                foreach(var kvp in uptimeByActor)
                {
                    if (hubConnection is not null && IsConnected &&
                        (DateTime.UtcNow - kvp.Value).TotalSeconds > TimeSpans.HireAgentsPeriod.TotalSeconds)
                    {
                        await hubConnection.SendAsync(MessageTypes.SendMessage, server, ConnectionId, kvp.Key, Messages.Delete, Guid.NewGuid(), null).ConfigureAwait(false);
                        uptimeByActor.Remove(kvp.Key);
                    }
                }
            }
        });
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync().ConfigureAwait(false);
    }
}
